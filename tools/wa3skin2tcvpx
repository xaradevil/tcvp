#! /usr/bin/perl
# -*- mmm-classes: here-doc -*-

# Copyright (C) 2003  Michael Ahlberg, Måns Rullgård
# Licensed under the Open Software License version 2.0

use strict;

use File::Temp qw/tempdir/;
use POSIX qw/floor/;
use File::Basename;
use Gimp qw/:auto/;
use XML::Parser;

die "Usage: wa3skin2tcvps skin dir\n" if $#ARGV != 1;

my $skin = $ARGV[0];
my $dir  = $ARGV[1];

my $sd;

-r $skin or die "Can't read $skin\n";

if(! -e $dir){
    mkdir($dir) or die "Can't create directory $dir.\n";
} elsif(-d $dir and ! -w $dir){
    die "Target directory $dir not writable.\n";
} elsif(! -d $dir){
    die "Target $dir exists and is non-directory.\n";
}

chomp(my $cwd = `pwd`);
$dir = "$cwd/$dir" unless $dir =~ m,^/,;

if(-d $skin){
    $sd = $skin;
} else {
    $sd = tempdir(CLEANUP => 1) or die "Can't create temp dir.\n";
    system "unzip -a -LL -qq -d $sd $skin" and die "Error unpacking skin.\n";
    system "chmod -R u+w $sd";
}

my $xml = new XML::Parser(Handlers => {Start => \&tag_start,
				       End => \&tag_end});
my $space;

my(%images, %groups, %layouts, $lc, $lg, $group, %imagefiles, $container);
my(%fonts);
my $xmldir = $sd;

sub max {
    $_[0] > $_[1]? $_[0]: $_[1];
}

# generic image helpers

sub save_image {
    my ($img, $f, $d) = @_;
    $f = "$dir/$f";
    $d = gimp_image_active_drawable($img) unless $d;
    gimp_file_save($img, $d, $f, $f);
}

sub write_image {
    my ($id) = @_;
    warn "$id undefined" and return unless exists $images{$id}{img};
    save_image $images{$id}{img}, "$id.png";
}

sub load_image {
    my ($file) = @_;
    return $imagefiles{$file} if $imagefiles{$file};
    die "$file: not readable" unless -r $file;
    my $img = gimp_file_load($file, $file) or
      die "Can't load $file";
    gimp_drawable_is_rgb(gimp_image_active_drawable($img)) or
      gimp_convert_rgb($img);
    $imagefiles{$file} = $img;
    return $img;
}

sub make_rect {
    my ($w, $h, $x, $y, $ww, $hh, $bg, $name) = @_;
    my $nbg = gimp_image_new($w, $h, RGB);
    my $bl = gimp_layer_new($nbg, $w, $h, RGBA_IMAGE, 'foo', 0, NORMAL_MODE);
    gimp_image_add_layer($nbg, $bl, 0);
    gimp_layer_set_offsets($bl, 0, 0);
    gimp_edit_clear($bl);
    if($ww and $hh){
	gimp_rect_select($nbg, $x, $y, $ww, $hh, REPLACE, 0, 0);
	gimp_palette_set_background([@$bg[0..2]]);
	gimp_edit_fill($bl, BG_IMAGE_FILL);
    }
    save_image($nbg, $name, $bl);
    gimp_image_delete($nbg);
}

sub save_rect {
    my ($img, $x, $y, $w, $h, $out) = @_;
    my(@tl, @br, $b, $r, $s);
    gimp_rect_select($img, $x, $y, $w, $h, REPLACE, 0, 0);
    my $d = gimp_image_get_active_layer($img);
    gimp_layer_add_alpha($d);
    $r = $x + $w - 1;
    $b = $y + $h - 1;
    my $iw = gimp_image_width($img);
    my $ih = gimp_image_height($img);
    if($x + $w > $iw or $y + $h > $ih){
	my $nw = max $iw, $x + $w;
	my $nh = max $ih, $y + $h;
	gimp_image_resize($img, $nw, $nh, 0, 0);
	gimp_layer_resize($d, $nw, $nh, 0, 0);
    }
    @tl = gimp_drawable_get_pixel($d, $x, $y);
    gimp_drawable_set_pixel($d, $x, $y, 4, [255, 255, 255, 255]);
    eval { @br = gimp_drawable_get_pixel($d, $r, $b) };
    if(!$@){
	gimp_drawable_set_pixel($d, $r, $b, 4, [255, 255, 255, 255]);
	$s = 1;
    }
    gimp_edit_copy($d);
    $img = gimp_image_new($w, $h, RGB);
    my $tl = gimp_layer_new($img, $w, $h, RGBA_IMAGE, 'foo', 100, NORMAL_MODE);
    gimp_image_add_layer($img, $tl, -1);
    gimp_layer_set_offsets($tl, 0, 0);
    gimp_edit_clear($tl);
    my $l = gimp_edit_paste($tl, 0);
    gimp_layer_set_offsets($l, 0, 0);
    gimp_floating_sel_anchor($l);
    gimp_drawable_set_pixel($tl, 0, 0, 4, \@tl);
    gimp_drawable_set_pixel($d, $x, $y, 4, \@tl);
    if($s){
	gimp_drawable_set_pixel($tl, $w - 1, $h - 1, 4, \@br);
	gimp_drawable_set_pixel($d, $r, $b, 4, \@br);
    }
    $images{$out}{img} = $img;
    $images{$out}{width} = $w;
    $images{$out}{height} = $h;
}

# font utilities

sub text_properties {
    my ($img, $th) = @_;
    my ($i, $j, @c, $d, $md, @fg, @bg, $tt, $tb);
    my $w = gimp_image_width($img);
    my $h = gimp_image_height($img);
    my %cc;

    $d = gimp_image_active_drawable($img);

    $md = 0;
    $tt = -1;

    for($j = 0; $j < $h and $j < 3 * $th; $j++){
	my $rd = 0;

	for($i = 0; $i < $w; $i++){
	    @c = gimp_drawable_get_pixel($d, $i, $j);
	    $rd = $c[3] if $c[3] > $rd;
	    $cc{$c[0] + ($c[1] << 8) + ($c[2] << 16)}++ if $c[3] > 200;
	}
	if($rd > 50){
	    $tt = $j % $th if $tt < 0;
	    $tb = $j % $th;
	}
    }

    my $c;
    for(keys %cc){
	$c = $_ if $cc{$_} > $cc{$c};
    }
    @fg = ($c & 0xff, ($c >> 8) & 0xff, ($c >> 16) & 0xff);

    return (\@fg, $tt, $tb);
}

sub get_font {
    my ($f) = @_;
    return $fonts{$f} if exists $fonts{$f}{face};
    return undef unless exists $fonts{$f}{file};
    my $fnt = $fonts{$f};
    my $img = load_image $$fnt{file};
    my($color, $tt, $tb) = text_properties $img, $$fnt{charheight};
    my $th = $tb - $tt + 1;
    my $pxs = floor($th * 1.4);
    my $asp = $$fnt{charwidth} / ($$fnt{charheight} / 1.3);
    $$fnt{face} = "arial:pixelsize=$pxs:aspect=$asp:weight=bold";
    $$fnt{color} = sprintf "rgb:%02x/%02x/%02x", @$color;
    $$fnt{top} = $tt;
    $$fnt{bottom} = $tb;
    $$fnt{height} = $th;

    return $fnt;
}

sub tag_name {
    my($n) = @_;
    $n =~ s,[^[:alnum:]_/-],_,g;
    return $n;
}

my %actions = (prev => 'previous',
	       play => 'play',
	       pause => 'pause',
	       stop => 'stop',
	       next => 'next',
	       eject => 'open',
	       close => 'close_ui',
	       switch => sub { sprintf "replace_ui($container.%s.conf)", @_ });

my %display = (songname =>
	       { text => q/'${title:u} - ${performer:u}'/,
		 align => q/left/,
		 scroll_style => 2 },
	       time =>
	       { text => q/'${time} '/,
		 align => q/right/,
		 action => q/'toggle_time'/},
	       songinfo =>
	       { text => q/'${audio_bitrate} kbps  ${audio_samplerate} kHz'/,
		 scroll_style => 2 });

my %sliders = (seek =>
	       { action => q/'seek'/,
		 value => q/'${position}'/ },
	       volume =>
	       { action => q/'change_pcm_volume,set_variable(pcm_volume)'/,
		 value => q/'${pcm_volume}'/},
	       pan =>
	       { action => q/'change_balance,set_variable(balance)'/,
		 value => q/'${balance:-%f0.5}'/});

sub action {
    my($ac, $prm) = @_;
    my $act = $actions{lc $ac} or return $ac;
    if(defined &$act){
	return &$act($prm);
    } else {
	return sprintf $act, $prm;
    }
}

sub update_size {
    my($group, $x, $y, $w, $h) = @_;
    if($group){
	$$group{width} = max($$group{width}, $x + $w);
	$$group{height} = max($$group{height}, $y + $h);
    }
}

sub tag_start {
    my(undef, $tag, %attr) = @_;
    return if $tag eq 'foo';
    print qq/$space$tag @{[map "$_=\"$attr{$_}\"", keys %attr]}\n/;
    $space .= '    ';
    map $attr{lc $_} = $attr{$_}, keys %attr;

    if($tag eq 'include'){			  # include
	my $xd = $xmldir;
	my $file = lc $attr{file};
	$xmldir = "$xmldir/" . dirname $file;
	open F, "$xmldir/" . basename $file;
	$xml->parse(join('', '<foo>', <F>, '</foo>'));
	close F;
	$xmldir = $xd;
    } elsif($tag eq 'groupdef'){		  # groupdef
	my $n = tag_name $attr{id};
	$lc = \$groups{$n}{content};
	$groups{$attr{id}}{groups} = [];
	$lg = $groups{$attr{id}}{groups};
	$group = $groups{$attr{id}};
	$$lc .= "$n \[\n";
    } elsif($tag =~ /(toggle)?button/){		  # button
	my $img = $attr{image};
	return unless exists $images{$img};
	update_size $group, $attr{x}, $attr{'y'},
	  $images{$img}{width}, $images{$img}{height};
	my $action = action $attr{action}, $attr{param};
	$$lc .= <<END_TCCONF;
button [
	position $attr{x} $attr{y}
	action '$action'
	image '$img.png'
END_TCCONF
	write_image $img;
	if($attr{hoverimage}){
	    $$lc .= "\tmouse_over '$attr{hoverimage}.png'\n";
	    write_image $attr{hoverimage};
	}
	if($attr{downimage}){
	    $$lc .= "\tpressed '$attr{downimage}.png'\n";
	    write_image $attr{downimage};
	}
	$$lc .= "]\n";
    } elsif($tag eq 'bitmap'){			  # bitmap
	my $id = $attr{id};
	my $img = load_image "$sd/" . lc $attr{file};
	$imagefiles{$attr{file}} = $img;
	if(exists $attr{x}){
	    save_rect($img, $attr{x}, $attr{'y'}, $attr{w}, $attr{h},
		      $attr{id});
	} else {
	    $images{$id}{img} = $img;
	    $images{$id}{width} = gimp_image_width($img);
	    $images{$id}{height} = gimp_image_height($img);
	}
    } elsif($tag eq 'layout'){			  # layout
	my $id = "$container.$attr{id}";
	$lc = \$layouts{$id}{content};
	$layouts{$id}{id} = $id;
	$layouts{$id}{groups} = [];
	$lg = $layouts{$id}{groups};
	$group = $layouts{$id};
	my $im = $images{$attr{background}};
	if($im){
	    $$lc .= "background '$attr{background}.png'\n";
	    $$lc .= sprintf "size %i %i\n", $$im{width}, $$im{height};
	    write_image $attr{background};
	} else {
	    my $w = $attr{w} || $attr{minimum_w};
	    my $h = $attr{h} || $attr{minimum_h};
	    $$lc .= "size $w $h\n";
	}
    } elsif($tag eq 'group'){			  # group
	my $gn = tag_name $attr{id};
	my $x = $attr{x} || 0;
	my $y = $attr{'y'} || 0;
	push @$lg, $gn;
	$$lc .= <<END_TCCONF;
box : $gn [
	position $x $y
]
END_TCCONF
    } elsif($tag eq 'layer' and			  # layer
	    exists $attr{image}){
	my $im = $images{$attr{image}};
	my($w, $h) = @$im{'width', 'height'};
	$w = $attr{w} if exists $attr{w};
	$h = $attr{h} if exists $attr{h};
	return if $w <= 0 or $h <= 0;
	if($w != $$im{width} or $h != $$im{height}){
	    gimp_image_scale($$im{img}, $w, $h);
	}
	write_image $attr{image};
	update_size $group, 0, 0, $w, $h;
	$$lc .= <<END_TCCONF;
box [
	position $attr{x} $attr{y}
	size $w $h
	background '$attr{image}.png'
]
END_TCCONF
    } elsif($tag eq 'container'){		  # container
	$container = $attr{id};
    } elsif($tag eq 'bitmapfont'){		  # bitmapfont
	$fonts{$attr{id}}{file} = "$sd/" . lc $attr{file};
	$fonts{$attr{id}}{charwidth} = $attr{charwidth};
	$fonts{$attr{id}}{charheight} = $attr{charheight};
    } elsif($tag eq 'text'){			  # text
	my $font = get_font $attr{font} or
	  print "*** font $attr{font} not found\n" and return;
	my $d = $display{lc $attr{display}} or
	  print "*** display $attr{display} not found\n" and return;
	my $dh = $attr{h} - $$font{charheight} + $$font{top};
	my $h = $$font{height};
	my $y = $attr{'y'} + floor($dh / 2);
	$$lc .= <<END_TCCONF;
label [
	size $attr{w} $h
	position $attr{x} $y
	font '$$font{face}'
	color '$$font{color}'
END_TCCONF
	my $a;
	$$lc .= "\talign '$a'\n" if $a = $attr{align} || $$d{align};
	map { $$lc .= "\t$_ $$d{$_}\n" if exists $$d{$_} }
	  'text', 'action', 'scroll_style';
	$$lc .= "]\n";
	update_size $group, $attr{x}, $y, $attr{w}, $h;
    } elsif($tag eq 'status'){			  # status
	$$lc .= <<END_TCCONF;
state [
	position $attr{x} $attr{y}
	value '\${state:-stop}'
END_TCCONF
	for('stop', 'play', 'pause'){
	    my $im = $attr{$_ . 'bitmap'};
	    if($im){
		$$lc .= "\timage '$_' '$im.png'\n";
		write_image $im;
	    }
	}
	$$lc .= "]\n";
	update_size $group, $attr{x}, $attr{w}, $attr{'y'}, $attr{h};
    } elsif($tag eq 'slider'){			  # slider
	my($x, $y, $w, $h, $id) = @attr{'x', 'y', 'w', 'h', 'id'};
	my($thumb, $ht, $dt) = @attr{'thumb', 'hoverthumb', 'downthumb'};
	my $dir = lc $attr{orientation} || 'horizontal';
	my($sx, $sy, $ex, $ey);
	my $th = $images{$thumb};
	if($dir eq 'horizontal'){
	    $sx = floor($$th{width} / 2);
	    $ex = floor($w - $$th{width} / 2);
	    $sy = $ey = floor($h / 2);
	} elsif($dir eq 'vertical'){
	    $sx = $ex = floor($w / 2);
	    $sy = floor($h - $$th{height} / 2);
	    $ey = floor($$th{height} / 2);
	} else {
	    return;
	}
	$$lc .= <<END_TCCONF;
slider [
	position $x $y
	background '$$group{id}.$id.png'
	indicator '$thumb.png'
END_TCCONF
	make_rect $w, $h, 0, 0, 0, 0, 0, "$$group{id}.$id.png";
	write_image $thumb;
	if($ht){
	    $$lc .= "\tmouse_over '$ht.png'\n";
	    write_image $ht;
	}
	if($dt){
	    $$lc .= "\tpressed '$dt.png'\n";
	    write_image $dt;
	}
	$$lc .= <<END_TCCONF;
	start_position $sx $sy
	end_position $ex $ey
END_TCCONF
	my $sl = $sliders{lc $attr{action}};
	map { $$lc .= "\t$_ $$sl{$_}\n" if exists $$sl{$_} }
	  'value', 'action' if $sl;
	$$lc .= "]\n";
	update_size $group, $x, $y, $w, $h;
    }
}

sub tag_end {
    my(undef, $tag) = @_;
    return if $tag eq 'foo';
    $space = substr $space, 0, -4;
    if($tag eq 'groupdef'){
	$$lc =~ s/(?<=\n)/\t/sg;
	$$lc .= "size $$group{width} $$group{height}\n";
	$$lc .= "]\n";
	undef $lc;
	undef $group;
    } elsif($tag eq 'layout'){
	undef $lc;
	undef $group;
    }	
}

sub print_group {
    my($fh, $gr) = @_;
    &print_group($fh, $groups{$_}) for(@{$$gr{groups}});
    print $fh $$gr{content};
}

Gimp::on_net {
    $xml->parsefile("$sd/skin.xml");

    for(keys %layouts){
	open S, ">$dir/$_.conf" or die;
	print S "# -*- tcconf -*-\n";
	print_group \*S, $layouts{$_};
	close S;
    }
};

#Gimp::set_trace(TRACE_ALL);
exit main;
